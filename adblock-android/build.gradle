apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

private String getNativeLibraryName() {
  def libraryName = System.getenv('LIBABP_SHARED_LIBRARY_NAME')
  return libraryName != null ? libraryName : 'adblockplus-jni'
}

android {
  compileSdkVersion 29
  buildToolsVersion '28.0.3'

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 29
    buildConfigField "String", "nativeLibraryName", '"' + getNativeLibraryName() + '"'
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles 'proguard-rules-adblock.txt'
  }

  flavorDimensions "abi"

  productFlavors {
    abi_arm {
      dimension = "abi"
      ndk {
        abiFilters "armeabi-v7a"
      }

      externalNativeBuild {
        ndkBuild {
          arguments "APP_ABI=armeabi-v7a"
        }
      }
    }

    abi_arm64 {
      dimension = "abi"
      ndk {
        abiFilters "arm64-v8a"
      }

      externalNativeBuild {
        ndkBuild {
          arguments "APP_ABI=arm64-v8a"
        }
      }
    }

    abi_x86 {
      dimension = "abi"
      ndk {
        abiFilters "x86"
      }

      externalNativeBuild {
        ndkBuild {
          arguments "APP_ABI=x86"
        }
      }
    }

    abi_all {
      dimension = "abi"
      ndk {
        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
      }
    }
  }


  if (System.getenv('SKIP_JNI_COMPILATION') != null) {
    println "[Configuration] Skipping JNI compilation"
    sourceSets.main.jni.srcDirs = []
  } else {
    externalNativeBuild {
      ndkBuild {
        path 'src/main/jni/Android.mk'
      }
    }
  }

  publish {
    userOrg = rootProject.ext.bintrayUserOrg
    groupId = rootProject.ext.bintrayGroupId
    artifactId = 'adblock-android'
    publishVersion = '3.8.8'
    licences = rootProject.ext.bintrayLicences
    desc = 'An Android library that provides the core functionality of Adblock Plus.'
    website = rootProject.ext.bintrayWebsite
    issueTracker = rootProject.ext.bintrayIssueTracker
    repository = rootProject.ext.bintrayRepository
    publications = ['abi_allRelease']
  }

  def sharedV8LibFiles = System.getenv('SHARED_V8_LIB_FILENAMES')
  if (sharedV8LibFiles != null) {
    def sharedV8LibFilesSet = []
    def sharedV8LibFilesArray = sharedV8LibFiles.split(' ')
    sharedV8LibFilesArray.each { eachFileName ->
      sharedV8LibFilesSet.add("**/" + eachFileName)
      println "[Configuration] Excluding shared v8 library " + eachFileName + " from AAR"
    }

    packagingOptions {
      excludes = sharedV8LibFilesSet
    }
  } else {
    println "[Configuration] No shared v8 libraries excluded from AAR"
  }

  useLibrary 'android.test.runner'
  useLibrary 'android.test.base'
}

dependencies {
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'androidx.test:core:1.2.0'
  androidTestImplementation 'androidx.test:runner:1.2.0'
  androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  androidTestImplementation 'org.mockito:mockito-core:2.24.0'
  androidTestImplementation 'org.mockito:mockito-android:2.24.0'
}
